{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO.js","webpack:///./src/components/GlobalStyle.js","webpack:///./src/components/Layout.js","webpack:///./src/components/Post.js","webpack:///./src/components/PostsList.js"],"names":["propTypes","pageContext","PropTypes","shape","tag","string","isRequired","data","allMarkdownRemark","totalCount","number","edges","arrayOf","node","fields","slug","frontmatter","title","TagPageTemplate","_ref","location","site","siteMetadata","_data$allMarkdownRema","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_4__","_components_SEO__WEBPACK_IMPORTED_MODULE_5__","keywords","_StyledH","_components_PostsList__WEBPACK_IMPORTED_MODULE_6__","posts","pageQuery","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","query","render","children","object","func","m","module","exports","require","default","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","description","lang","meta","array","SEO","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","authors","concat","length","join","_public_static_d_1794625727_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","GlobalStyle","createGlobalStyle","_templateObject","HomeLink","styled","Link","withConfig","displayName","componentId","Main","main","Layout","react_default","Div_default","column","components_GlobalStyle","to","post","date","summary","Post","objectWithoutPropertiesLoose_default","gatsby_browser_entry","dangerouslySetInnerHTML","__html","PostsList","listTop","map","key"],"mappings":"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","file":"component---src-templates-tags-js-5e4e1a669c82328bae24.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\n\r\nimport Layout from '../components/Layout'\r\nimport SEO from '../components/SEO'\r\nimport PostsList from '../components/PostsList'\r\n\r\nconst propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nconst TagPageTemplate = ({ pageContext, data, location }) => {\r\n  const { tag } = pageContext\r\n  const { title } = data.site.siteMetadata\r\n  const { edges, totalCount } = data.allMarkdownRemark\r\n\r\n  return (\r\n    <Layout location={location} title={title}>\r\n      <SEO title={`\"${tag}\" posts`} keywords={['blog', 'gatsby', 'javascript', 'react']} />\r\n\r\n      <h4 css=\"text-align: center; margin: 0 0 16px; height: 16px;\">\r\n        {`${totalCount} post${totalCount === 1 ? '' : 's'} tagged with \"${tag}\"`}\r\n      </h4>\r\n\r\n      <PostsList posts={edges} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nTagPageTemplate.propTypes = propTypes\r\n\r\nexport default TagPageTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            summary\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nconst propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nconst defaultProps = {\r\n  lang: 'en',\r\n  meta: [],\r\n  keywords: [],\r\n}\r\n\r\nconst SEO = ({ description, lang, meta, keywords, title }) => (\r\n  <StaticQuery\r\n    query={detailsQuery}\r\n    render={data => {\r\n      const metaDescription = description || data.site.siteMetadata.description\r\n\r\n      return (\r\n        <Helmet\r\n          htmlAttributes={{\r\n            lang,\r\n          }}\r\n          title={title}\r\n          titleTemplate={`%s | ${data.site.siteMetadata.title}`}\r\n          meta={[\r\n            {\r\n              name: 'description',\r\n              content: metaDescription,\r\n            },\r\n            {\r\n              property: 'og:title',\r\n              content: title,\r\n            },\r\n            {\r\n              property: 'og:description',\r\n              content: metaDescription,\r\n            },\r\n            {\r\n              property: 'og:type',\r\n              content: 'website',\r\n            },\r\n            {\r\n              name: 'twitter:card',\r\n              content: 'summary',\r\n            },\r\n            {\r\n              name: 'twitter:creator',\r\n              content: data.site.siteMetadata.authors,\r\n            },\r\n            {\r\n              name: 'twitter:title',\r\n              content: title,\r\n            },\r\n            {\r\n              name: 'twitter:description',\r\n              content: metaDescription,\r\n            },\r\n          ]\r\n            .concat(\r\n              keywords.length > 0\r\n                ? {\r\n                    name: 'keywords',\r\n                    content: keywords.join(', '),\r\n                  }\r\n                : []\r\n            )\r\n            .concat(meta)}\r\n        />\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nSEO.propTypes = propTypes\r\nSEO.defaultProps = defaultProps\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        authors\r\n      }\r\n    }\r\n  }\r\n`\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    font: 14px/1.5 Merriweather, Georgia, serif;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    color: #333;\r\n  }\r\n\r\n  *, *::after, *::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  h1, h2, h3, h4, h5 {\r\n    font-family: Cinzel, serif;\r\n    font-weight: 100;\r\n    line-height: 0.9;\r\n\r\n    a {\r\n      text-decoration: none;\r\n    }\r\n  }\r\n\r\n  a {\r\n    color: #005882;\r\n\r\n    &:hover {\r\n      text-decoration: none;\r\n    }\r\n  }\r\n\r\n  blockquote {\r\n    margin: 0;\r\n    border-left: 5px solid rgba(0, 88, 130, .3);\r\n    padding: 0 1em;\r\n\r\n    font-style: italic;\r\n    font-weight: 300;\r\n  }\r\n\r\n  .gatsby-highlight {\r\n    overflow: auto;\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'gatsby'\r\nimport Div from 'styled-kit/Div'\r\n\r\nimport GlobalStyle from './GlobalStyle'\r\n\r\nconst HomeLink = styled(Link)`\r\n  flex: none;\r\n  display: block;\r\n  padding: 32px 16px;\r\n  font: 35px/0.6 Cinzel, serif;\r\n  text-decoration: none;\r\n`\r\n\r\nconst Main = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  padding: 16px;\r\n  width: 100%;\r\n  max-width: 1024px;\r\n  overflow: auto;\r\n`\r\n\r\nconst propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n}\r\n\r\nconst Layout = ({ title, children }) => (\r\n  <Div column>\r\n    <GlobalStyle />\r\n    <HomeLink to=\"/\">{title}</HomeLink>\r\n    <Main>{children}</Main>\r\n  </Div>\r\n)\r\n\r\nLayout.propTypes = propTypes\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport Div from 'styled-kit/Div'\r\n\r\nconst propTypes = {\r\n  post: PropTypes.shape({\r\n    fields: PropTypes.shape({\r\n      slug: PropTypes.string.isRequired,\r\n    }),\r\n    frontmatter: PropTypes.shape({\r\n      date: PropTypes.string.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      summary: PropTypes.string,\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default function Post({ post, ...props }) {\r\n  return (\r\n    <Div column {...props}>\r\n      <h2 css=\"margin: 0;\">\r\n        <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\r\n      </h2>\r\n\r\n      <small>{post.frontmatter.date}</small>\r\n\r\n      <p dangerouslySetInnerHTML={{ __html: post.frontmatter.summary }} />\r\n    </Div>\r\n  )\r\n}\r\n\r\nPost.propTypes = propTypes\r\n","import React from 'react'\r\nimport Div from 'styled-kit/Div'\r\n\r\nimport Post from './Post'\r\n\r\nconst PostsList = ({ posts, ...props }) => (\r\n  <Div column listTop={32} {...props}>\r\n    {posts.map(post => (\r\n      <Post key={post.node.fields.slug} post={post.node} />\r\n    ))}\r\n  </Div>\r\n)\r\n\r\nexport default PostsList\r\n"],"sourceRoot":""}