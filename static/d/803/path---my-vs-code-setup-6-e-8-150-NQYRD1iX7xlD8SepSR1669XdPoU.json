{"data":{"site":{"siteMetadata":{"title":"Expecto Frontendum"}},"markdownRemark":{"id":"444a3408-4fcb-5bcb-a6b3-6415f1644f8e","excerpt":"This is a concise list of my favourite VS Code extensions and settings. Background I am a huge fan of VS Code. I previously coded on Sublime Text, then moved to…","html":"<p>This is a concise list of my favourite VS Code extensions and settings.</p>\n<h3>Background</h3>\n<p>I am a huge fan of VS Code. I previously coded on Sublime Text, then moved to Code after a job change. The transition has been smooth and I am not looking back!</p>\n<h3>Extensions</h3>\n<h4>Syntax highlighting</h4>\n<p> <a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=mgmcdermott.vscode-language-babel\">Babel Javascript</a> and  <a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=jpoissonnier.vscode-styled-components\">Styled Components</a></p>\n<p>I don’t think I need to introduce these two ;)</p>\n<blockquote>\n<p>JavaScript syntax highlighting for ES201x, React JSX, Flow and GraphQL.\nSyntax highlighting and IntelliSense for styled-components.</p>\n</blockquote>\n<h4>Code formatting</h4>\n<p>  <a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=dbaeumer.vscode-eslint\">ESlint</a> and <a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=esbenp.prettier-vscode\">Prettier</a></p>\n<p>I have both these plugins set up in such a way that linting errors are highlighted according to the current project’s config.</p>\n<h4><a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=shardulm94.trailing-spaces\">Trailing spaces</a></h4>\n<blockquote>\n<p>Highlight trailing spaces and delete them in a flash!</p>\n</blockquote>\n<p>I brought this with me from Sublime.</p>\n<h4><a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=2gua.rainbow-brackets\">Rainbow brackets</a></h4>\n<p>I believe I discovered this gem while exploring <em>best vs code plugins</em> in the search engine. I find this one immensely helpful overall in my JS code.</p>\n<p>Currently I work with a React/Redux application with actions written this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendRequestWithReload</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token constant\">LOADING</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">sendData</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRefreshedData</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token constant\">LOADED</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this plugin each pair of brackets has its own color. Finding a bracket that is not closed has never been so easy!</p>\n<p><em>… and for the purpose of this blog:</em></p>\n<h4><a href=\"https://marketplace.visualstudio.com/itemdetails?itemName=shd101wyy.markdown-preview-enhanced\">Markdown Preview Enhanced</a></h4>\n<p>Recommended by a colleague. So convenient, because of its live reload.</p>\n<h3>Settings</h3>\n<h4>View the whole path of the current file</h4>\n<p>This one is especially useful to me when familiarizing myself with a new project. At that moment I don’t know my way around it just yet and the path helps me navigate.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;window.title&quot;: &quot;${activeEditorLong}${separator}${rootName}&quot;,\n}</code></pre></div>\n<h4>View all whitespace</h4>\n<p>There were times when indentation alone was not enough for me to spot an extra white space character. Its use seems obsolete with Prettier right now, but I cannot imagine having it any other way.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;editor.renderWhitespace&quot;: &quot;all&quot;,&quot;files.insertFinalNewline&quot;: true,\n}</code></pre></div>\n<h4>Quick-open to edit files</h4>\n<p>Open the file in a new tab with quick-open (e.g. <code class=\"language-text\">cmd + p</code>) instead of viewing it with <a href=\"https://code.visualstudio.com/docs/getstarted/userinterface#_preview-mode\">preview mode</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;workbench.editor.enablePreviewFromQuickOpen&quot;: false,\n}</code></pre></div>\n<h4>Format files</h4>\n<p><em>Format on save</em> is a life saver. One of my favourite options, here together with the project’s <code class=\"language-text\">prettier</code> config. Trimming trailing whitespace on save and adding that last empty line is a cherry on top.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;prettier.requireConfig&quot;: true,\n    &quot;editor.formatOnSave&quot;: true,\n    &quot;trailing-spaces.trimOnSave&quot;: true,\n    &quot;files.insertFinalNewline&quot;: true,\n}</code></pre></div>","frontmatter":{"title":"My VS Code setup","date":"April 09, 2019","author":{"id":"kasia-zadurska","name":"Kasia Zadurska","bio":"Kasia codes awesome stuff","avatar":{"publicURL":"/static/kasia-profile-pic-89e744b34d9d14a467c4e31fdc49ec17.jpg"},"twitter":"kzadurska"}}}},"pageContext":{"slug":"/my-vs-code-setup/","previous":null,"next":null}}