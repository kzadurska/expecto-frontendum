{"version":3,"sources":["webpack://expecto-frontendum/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://expecto-frontendum/./src/components/Post.js","webpack://expecto-frontendum/./src/components/PostsList.js","webpack://expecto-frontendum/./src/templates/tags.js"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","Post","post","props","column","Link","to","fields","slug","frontmatter","title","date","dangerouslySetInnerHTML","__html","summary","posts","listTop","map","node","pageContext","data","location","tag","site","siteMetadata","allMarkdownRemark","edges","totalCount","keywords"],"mappings":"6HAAe,SAASA,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E,0KCMM,SAASM,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,KAASC,GAAS,YAC/C,OACE,gBAAC,IAAD,eAAKC,QAAM,GAAKD,GACd,uBACE,gBAAC,EAAAE,KAAD,CAAMC,GAAIJ,EAAKK,OAAOC,MAAON,EAAKO,YAAYC,QAGhD,6BAAQR,EAAKO,YAAYE,MAEzB,qBAAGC,wBAAyB,CAAEC,OAAQX,EAAKO,YAAYK,Y,0HCd7D,EARkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAUZ,GAAb,mBAChB,gBAAC,IAAD,eAAKC,QAAM,EAACY,QAAS,IAAQb,GAC1BY,EAAME,KAAI,SAAAf,GAAI,OACb,gBAACD,EAAD,CAAMR,IAAKS,EAAKgB,KAAKX,OAAOC,KAAMN,KAAMA,EAAKgB,a,4FC2CnD,UApBwB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpCC,EAAQH,EAARG,IACAZ,EAAUU,EAAKG,KAAKC,aAApBd,MACR,EAA8BU,EAAKK,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WAEf,OACE,gBAAC,IAAD,CAAQN,SAAUA,EAAUX,MAAOA,GACjC,gBAAC,IAAD,CAAKA,MAAK,IAAMY,EAAN,UAAoBM,SAAU,CAAC,OAAQ,SAAU,aAAc,WAEzE,uBACMD,EADN,SACuC,IAAfA,EAAmB,GAAK,KADhD,iBACoEL,EADpE,KAIA,gBAAC,IAAD,CAAWP,MAAOW,MASjB,I","file":"component---src-templates-tags-js-11e21d23ee5580092f96.js","sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport Div from 'styled-kit/Div'\n\nconst propTypes = {\n  post: PropTypes.shape({\n    fields: PropTypes.shape({\n      slug: PropTypes.string.isRequired,\n    }),\n    frontmatter: PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      summary: PropTypes.string,\n    }),\n  }),\n}\n\nexport default function Post({ post, ...props }) {\n  return (\n    <Div column {...props}>\n      <h2 css=\"margin: 0;\">\n        <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n      </h2>\n\n      <small>{post.frontmatter.date}</small>\n\n      <p dangerouslySetInnerHTML={{ __html: post.frontmatter.summary }} />\n    </Div>\n  )\n}\n\nPost.propTypes = propTypes\n","import React from 'react'\nimport Div from 'styled-kit/Div'\n\nimport Post from 'components/Post'\n\nconst PostsList = ({ posts, ...props }) => (\n  <Div column listTop={32} {...props}>\n    {posts.map(post => (\n      <Post key={post.node.fields.slug} post={post.node} />\n    ))}\n  </Div>\n)\n\nexport default PostsList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport Layout from 'components/Layout'\nimport SEO from 'components/SEO'\nimport PostsList from 'components/PostsList'\n\nconst propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nconst TagPageTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext\n  const { title } = data.site.siteMetadata\n  const { edges, totalCount } = data.allMarkdownRemark\n\n  return (\n    <Layout location={location} title={title}>\n      <SEO title={`\"${tag}\" posts`} keywords={['blog', 'gatsby', 'javascript', 'react']} />\n\n      <h4 css=\"text-align: center; margin: 0 0 16px; height: 16px;\">\n        {`${totalCount} post${totalCount === 1 ? '' : 's'} tagged with \"${tag}\"`}\n      </h4>\n\n      <PostsList posts={edges} />\n    </Layout>\n  )\n}\n\nTagPageTemplate.propTypes = propTypes\n\nexport default TagPageTemplate\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            summary\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}